definitions:
  dto.Credentials:
    properties:
      password:
        example: password
        type: string
      username:
        example: username
        type: string
    type: object
  dto.Register:
    properties:
      email:
        example: email@gmail.com
        type: string
      password:
        example: password
        type: string
      username:
        example: username
        type: string
    type: object
  dto.User:
    properties:
      email:
        type: string
      username:
        example: username
        type: string
    type: object
  utils.ResponseMessage200:
    properties:
      message:
        example: success
        type: string
      status:
        example: 200
        type: integer
    type: object
  utils.ResponseMessage201:
    properties:
      message:
        example: success
        type: string
      status:
        example: 201
        type: integer
    type: object
  utils.ResponseMessage400:
    properties:
      message:
        example: Bad Request
        type: string
      status:
        example: 400
        type: integer
    type: object
  utils.ResponseMessage404:
    properties:
      message:
        example: not found
        type: string
      status:
        example: 404
        type: integer
    type: object
  utils.ResponseMessage409:
    properties:
      message:
        example: Conflict
        type: string
      status:
        example: 409
        type: integer
    type: object
info:
  contact: {}
  description: This is a REST API using Gin and Gorm.
  title: REST API with Gin and Gorm
  version: 0.1.4
paths:
  /api/v1/user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user information by providing an ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/utils.ResponseMessage200'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseMessage404'
      security:
      - BearerAuth: []
      summary: Delete a user by ID
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get user information by providing an ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/utils.ResponseMessage200'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseMessage404'
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user information by providing an ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.User'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/utils.ResponseMessage200'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseMessage400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseMessage404'
      security:
      - BearerAuth: []
      summary: Update a user by ID
      tags:
      - Users
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get all users information
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/utils.ResponseMessage200'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseMessage404'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login to the system
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/utils.ResponseMessage200'
        "201":
          description: Success
          schema:
            $ref: '#/definitions/utils.ResponseMessage201'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseMessage404'
      summary: Login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout to the system
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/utils.ResponseMessage200'
        "201":
          description: Success
          schema:
            $ref: '#/definitions/utils.ResponseMessage201'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseMessage404'
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.Register'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/utils.ResponseMessage201'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseMessage400'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ResponseMessage409'
      summary: Register
      tags:
      - Authentication
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
